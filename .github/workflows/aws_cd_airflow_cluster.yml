name: Deploy to Airflow Cluster

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}


      - name: Get instance IDs by Tag
        id: get-instance
        run: |
          TAGS=("BASTION_HOST" "WEBSERVER" "SCHEDULER" "WORKER")
          for TAG in "${TAGS[@]}"; do
            INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ vars[${TAG}_NAME_TAG] }}" --query 'Reservations[0].Instances[0].InstanceId' --output text)
            echo "${TAG}_ID=$INSTANCE_ID" >> $GITHUB_OUTPUT
          done


      - name: Check instance status
        id: check-status
        run: |
          TAGS=("BASTION_HOST" "WEBSERVER" "SCHEDULER" "WORKER")
          for TAG in "${TAGS[@]}"; do
            STATUS=$(aws ec2 describe-instances --instance-ids ${{ steps.get-instances.outputs[${TAG}_ID] }} --query 'Reservations[0].Instances[0].State.Name' --output text)
            echo "${TAG}_STATUS=$STATUS" >> $GITHUB_OUTPUT
          done


      - name: Start instances if stopped
        run: |
          TAGS=("BASTION_HOST" "WEBSERVER" "SCHEDULER" "WORKER")
          for TAG in "${TAGS[@]}"; do
            if [ "${{ steps.check-status.outputs[${TAG}_STATUS] }}" != "running" ]; then
              aws ec2 start-instances --instance-ids ${{ steps.get-instances.outputs[${TAG}_ID] }}
              aws ec2 wait instance-running --instance-ids ${{ steps.get-instances.outputs[${TAG}_ID] }}
            fi
          done


      - name: Get instance IPs
        id: get-instance-ips
        run: |
          TAGS=("BASTION_HOST" "WEBSERVER" "SCHEDULER" "WORKER")
          for TAG in "${TAGS[@]}"; do
            if [ "$TAG" == "BASTION_HOST" ]; then
              IP_QUERY="PublicIpAddress"
            else
              IP_QUERY="PrivateIpAddress"
            fi
            IP=$(aws ec2 describe-instances --instance-ids ${{ steps.get-instances.outputs[${TAG}_ID] }} --query "Reservations[0].Instances[0].$IP_QUERY" --output text)
            echo "${TAG}_IP=$IP" >> $GITHUB_OUTPUT
          done

      - name: Create SSH key file
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > team_jun_1.pem
          chmod 600 team_jun_1.pem

      - name: Git Pull on Airflow Servers
        run: |
          TAGS=("WEBSERVER" "SCHEDULER" "WORKER")
          for TAG in "${TAGS[@]}"; do
            ssh -f -N -M -S my-cicd-socket -o StrictHostKeyChecking=no -i team_jun_1.pem -L 2222:${{ steps.get-instance-ips.outputs[${TAG}_IP] }}:22 ubuntu@${{ steps.get-instance-ips.outputs[BASTION_HOST_IP] }}
            ssh -o StrictHostKeyChecking=no -i team_jun_1.pem -p 2222 ubuntu@localhost << 'EOF'
              echo "Connected to Private Subnet Airflow Server via SSH Tunneling"
              cd ${{ vars.AIRFLOW_DIR }}
              git config --global credential.helper store
              echo "https://${{ secrets.GIT_AUTH_TOKEN }}:@github.com" > ~/.git-credentials
              git pull origin main
              rm ~/.git-credentials
            EOF
            ssh -S my-cicd-socket -O exit ubuntu@${{ steps.get-instance-ips.outputs[BASTION_HOST_IP] }}
          done